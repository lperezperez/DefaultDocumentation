<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Parameters" xml:space="preserve">
    <value>Parameters</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Generates wiki pages for GitHub from source documentation.</value>
  </data>
  <data name="Assembly" xml:space="preserve">
    <value>The file path of the assembly to document.</value>
  </data>
  <data name="FileNameMode" xml:space="preserve">
    <value>The file name of the Markdowns pages.</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Shows the application help.</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>The name of the default home page.</value>
  </data>
  <data name="InvalidCharReplacement" xml:space="preserve">
    <value>The char which replaces all file name invalid chars.</value>
  </data>
  <data name="NestedTypeVisibility" xml:space="preserve">
    <value>The visibility of the nested types.</value>
  </data>
  <data name="Output" xml:space="preserve">
    <value>The folder path in which documentation files will be generated.</value>
  </data>
  <data name="Xml" xml:space="preserve">
    <value>The file path of the XML generated documentation.</value>
  </data>
  <data name="GetHelp" xml:space="preserve">
    <value>For more information type {0} {1}</value>
  </data>
  <data name="CannotParse" xml:space="preserve">
    <value>Cannot be parsed.</value>
  </data>
  <data name="InvalidFormat" xml:space="preserve">
    <value>Has an invalid format: {0}</value>
  </data>
  <data name="NotSpecified" xml:space="preserve">
    <value>Has not been specified.</value>
  </data>
  <data name="NotFound" xml:space="preserve">
    <value>Cannot be found: {0}</value>
  </data>
  <data name="CannotConvert" xml:space="preserve">
    <value>Cannot convert {0} to {1}.</value>
  </data>
  <data name="CannotCreate" xml:space="preserve">
    <value>Cannot be created: {0}</value>
  </data>
  <data name="Syntax" xml:space="preserve">
    <value>Syntax</value>
  </data>
  <data name="ErrorWrittingDoc" xml:space="preserve">
    <value>Error while writing documentation for {0}</value>
  </data>
  <data name="Values" xml:space="preserve">
    <value>Values</value>
  </data>
  <data name="FileNameModeMd5" xml:space="preserve">
    <value>Sets an MD5 hash (from the full name of the member) as the Markdown file name.</value>
  </data>
  <data name="FileNameModeName" xml:space="preserve">
    <value>Sets the type and member name without the namespace as the Markdown page name. May get collision if project has multiple types with the same name in different namespaces.</value>
  </data>
  <data name="FileNameModeFullName" xml:space="preserve">
    <value>Sets the full qualified name of the member as the Markdown file name.</value>
  </data>
  <data name="NestedTypeVisibilityNamespace" xml:space="preserve">
    <value>Nested type links are showed on the namespace page.</value>
  </data>
  <data name="NestedTypeVisibilityDeclaringType" xml:space="preserve">
    <value>Nested type links are showed on their declaring type page.</value>
  </data>
  <data name="NestedTypeVisibilityEverywhere" xml:space="preserve">
    <value>Nested type links are showed on both the namespace and their declaring type page.</value>
  </data>
</root>