<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetToGitHubWiki.Tests</name>
    </assembly>
    <members>
        <member name="T:DotNetToGitHubWiki.Class">
            <summary>
                A Dummy <see langword="class"/> whose purpose is to implement all the <see href="https://docs.microsoft.com/dotnet/csharp/programming-guide/xmldoc/recommended-tags-for-documentation-comments">recommended tags for documentation comments</see>. <list type="table">
                    <listheader>
                        <term>term</term> <description>description</description>
                    </listheader> <item>
                        <term>term1</term> <description>description1</description>
                    </item> <item>
                        <term>term2</term> <description>description2</description>
                    </item> <item>
                        <term>term3</term> <description>description3</description>
                    </item>
                </list>
            </summary>
        </member>
        <member name="F:DotNetToGitHubWiki.Class.DummyConst">
            <summary>
                Represents a <see href="https://docs.microsoft.com/dotnet/csharp/programming-guide/classes-and-structs/constants">constant</see>.
            </summary>
        </member>
        <member name="F:DotNetToGitHubWiki.Class.DummyField">
            <summary>
                Represents a <see href="https://docs.microsoft.com/dotnet/csharp/programming-guide/classes-and-structs/fields">field</see>.
            </summary>
        </member>
        <member name="P:DotNetToGitHubWiki.Class.DummyOption">
            <summary>
                Represents a <see href="https://docs.microsoft.com/dotnet/csharp/programming-guide/classes-and-structs/properties">property</see>.
            </summary>
        </member>
        <member name="P:DotNetToGitHubWiki.Class.DummyProperty">
            <summary>
                Represents a <see href="https://docs.microsoft.com/dotnet/csharp/programming-guide/classes-and-structs/properties">property</see>.
            </summary>
        </member>
        <member name="P:DotNetToGitHubWiki.Class.Item(System.Int32)">
            <summary>Represents an <see href="https://docs.microsoft.com/dotnet/csharp/programming-guide/indexers">indexed</see>.</summary>
            <param name="index">The index of the <see langword="dynamic"/> instance to retrieve.</param>
            <value>The <see langword="dynamic"/> instance at the specified <paramref name="index"/>.</value>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_Addition(DotNetToGitHubWiki.Class,System.Int32)">
            <summary>Computes the sum of <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">Left operator parameter.</param>
            <param name="right">Right operator parameter.</param>
            <returns>The sum of <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_BitwiseAnd(DotNetToGitHubWiki.Class,DotNetToGitHubWiki.Class)">
            <summary>Computes the logical AND of <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">Left operator parameter.</param>
            <param name="right">Right operator parameter.</param>
            <returns>The logical AND of <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_BitwiseOr(DotNetToGitHubWiki.Class,DotNetToGitHubWiki.Class)">
            <summary>
                Evaluates both <paramref name="left"/> and <paramref name="right"/> even if <paramref name="left"/> evaluates to <c>true</c>, so that the operation result is <c>true</c> regardless of the value of <paramref name="right"/>.
            </summary>
            <param name="left">Left operator parameter.</param>
            <param name="right">Right operator parameter.</param>
            <returns><c>true</c> if <paramref name="left"/> is evaluated as <c>true</c> , otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_Decrement(DotNetToGitHubWiki.Class)">
            <summary>Decrements <paramref name="class"/> by 1.</summary>
            <param name="class">A <see cref="T:DotNetToGitHubWiki.Class"/> instance.</param>
            <returns>
                If prefixed, the value of <paramref name="class"/> after the operation, otherwise the value of <paramref name="class"/> before the operation.
            </returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_Division(DotNetToGitHubWiki.Class,DotNetToGitHubWiki.Class)">
            <summary>Divides <paramref name="left"/> by <paramref name="right"/>.</summary>
            <param name="left">Left operator parameter.</param>
            <param name="right">Right operator parameter.</param>
            <returns>The result of <paramref name="left"/> divided by <paramref name="right"/>.</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_Equality(DotNetToGitHubWiki.Class,DotNetToGitHubWiki.Class)">
            <summary>Compares <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">Left operator parameter.</param>
            <param name="right">Right operator parameter.</param>
            <returns><c>true</c> if <paramref name="left"/> and <paramref name="right"/> are equal, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_ExclusiveOr(DotNetToGitHubWiki.Class,DotNetToGitHubWiki.Class)">
            <summary>
                Computes the logical exclusive OR, also known as the logical XOR, of <paramref name="left"/> and <paramref name="right"/>.
            </summary>
            <param name="left">Left operator parameter.</param>
            <param name="right">Right operator parameter.</param>
            <returns>
                <c>true</c> if <paramref name="left"/> evaluates to <c>true</c> and <paramref name="right"/> evaluates to <c>false</c>, or <paramref name="left"/> evaluatess to <c>false</c> and <paramref name="right"/> evaluates to <c>true</c>. Otherwise, the result is <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_Explicit(DotNetToGitHubWiki.Class)~System.Double">
            <summary>Converts the <paramref name="class"/> to a <see cref="T:System.Double"/> instance.</summary>
            <param name="class">A <see cref="T:DotNetToGitHubWiki.Class"/> instance.</param>
            <returns>A <see cref="T:System.Double"/> instance.</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_Explicit(System.Int32)~DotNetToGitHubWiki.Class">
            <summary>Converts the <paramref name="integer"/> to a <see cref="T:DotNetToGitHubWiki.Class"/> instance.</summary>
            <param name="integer">An <see cref="T:System.Int32"/> instance.</param>
            <returns>A <see cref="T:DotNetToGitHubWiki.Class"/> instance.</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_GreaterThan(DotNetToGitHubWiki.Class,DotNetToGitHubWiki.Class)">
            <summary>Compares <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">Left operator parameter.</param>
            <param name="right">Right operator parameter.</param>
            <returns><c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_GreaterThanOrEqual(DotNetToGitHubWiki.Class,DotNetToGitHubWiki.Class)">
            <summary>Compares <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">Left operator parameter.</param>
            <param name="right">Right operator parameter.</param>
            <returns><c>true</c> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_Increment(DotNetToGitHubWiki.Class)">
            <summary>Increments <paramref name="class"/> by 1.</summary>
            <param name="class">A <see cref="T:DotNetToGitHubWiki.Class"/> instance.</param>
            <returns>
                If prefixed, the value of <paramref name="class"/> after the operation, otherwise the value of <paramref name="class"/> before the operation.
            </returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_Inequality(DotNetToGitHubWiki.Class,DotNetToGitHubWiki.Class)">
            <summary>Compares <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">Left operator parameter.</param>
            <param name="right">Right operator parameter.</param>
            <returns><c>false</c> if <paramref name="left"/> and <paramref name="right"/> are equal, otherwise, <c>true</c>.</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_LeftShift(DotNetToGitHubWiki.Class,System.Int32)">
            <summary>Shifts <paramref name="class"/> left by the number of bits defined by <paramref name="integer"/>.</summary>
            <param name="class">A <see cref="T:DotNetToGitHubWiki.Class"/> instance.</param>
            <param name="integer">An <see cref="T:System.Int32"/> instance.</param>
            <returns>An <see cref="T:System.Int32"/> instance.</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_LessThan(DotNetToGitHubWiki.Class,DotNetToGitHubWiki.Class)">
            <summary>Compares <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">Left operator parameter.</param>
            <param name="right">Right operator parameter.</param>
            <returns><c>true</c> if <paramref name="left"/> is less than <paramref name="right"/>, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_LessThanOrEqual(DotNetToGitHubWiki.Class,DotNetToGitHubWiki.Class)">
            <summary>Compares <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">Left operator parameter.</param>
            <param name="right">Right operator parameter.</param>
            <returns><c>true</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_Modulus(DotNetToGitHubWiki.Class,DotNetToGitHubWiki.Class)">
            <summary>Computes the remainder after dividing <paramref name="left"/> by <paramref name="right"/>.</summary>
            <param name="left">Left operator parameter.</param>
            <param name="right">Right operator parameter.</param>
            <returns>The remainder after dividing <paramref name="left"/> by <paramref name="right"/>.</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_Multiply(DotNetToGitHubWiki.Class,DotNetToGitHubWiki.Class)">
            <summary>Computes the product of <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">Left operator parameter.</param>
            <param name="right">Right operator parameter.</param>
            <returns>The product of <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_OnesComplement(DotNetToGitHubWiki.Class)">
            <summary>Produces a bitwise complement of <paramref name="class"/> by reversing each bit.</summary>
            <param name="class">A <see cref="T:DotNetToGitHubWiki.Class"/> instance.</param>
            <returns>A bitwise complement of <paramref name="class"/>.</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_RightShift(DotNetToGitHubWiki.Class,System.Int32)">
            <summary>Shifts <paramref name="class"/> right by the number of bits defined by <paramref name="integer"/>.</summary>
            <param name="class">A <see cref="T:DotNetToGitHubWiki.Class"/> instance.</param>
            <param name="integer">An <see cref="T:System.Int32"/> instance.</param>
            <returns>An <see cref="T:System.Int32"/> instance.</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_Subtraction(DotNetToGitHubWiki.Class,DotNetToGitHubWiki.Class)">
            <summary>Subtracts <paramref name="right"/> from <paramref name="left"/>.</summary>
            <param name="left">Left operator parameter.</param>
            <param name="right">Right operator parameter.</param>
            <returns>The result of <paramref name="left"/> minus <paramref name="right"/>.</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_UnaryNegation(DotNetToGitHubWiki.Class)">
            <summary>Computes the numeric negation of <paramref name="class"/>.</summary>
            <param name="class">A <see cref="T:DotNetToGitHubWiki.Class"/> instance.</param>
            <returns>The <paramref name="class"/> negated.</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.op_UnaryPlus(DotNetToGitHubWiki.Class)">
            <summary>Returns the value of <paramref name="class"/>.</summary>
            <param name="class">A <see cref="T:DotNetToGitHubWiki.Class"/> instance.</param>
            <returns>Yhe value of <paramref name="class"/>.</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="object">The object to compare with the current object.</param>
            <returns>
                <see langword="true"/> if the specified <paramref name="object"/> is equal to the current <see cref="T:DotNetToGitHubWiki.Class"/> instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.DummyAsync``1(``0)">
            <summary>dummy</summary>
            <typeparam name="T">dummy</typeparam>
            <param name="value">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.DummyExplicitTuple``1(``0)">
            <summary>dummy</summary>
            <typeparam name="T2">dummy</typeparam>
            <param name="pouet">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.DummyMethod``1(``0)">
            <summary>dummy</summary>
            <param name="pouet">kikoo</param>
            <typeparam name="T2">lol</typeparam>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.DummyTuple``1(``0)">
            <summary>dummy</summary>
            <typeparam name="T2">dummy</typeparam>
            <param name="pouet">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="M:DotNetToGitHubWiki.Class.Unsafe(System.Void*)">
            <summary>dummy</summary>
            <param name="p">dummy</param>
            <returns>dummy</returns>
        </member>
        <member name="T:DotNetToGitHubWiki.Class.DummyNested`1">
            <summary>
                dummy <c>c tag</c> line break
                <para>para tag.</para>
                <see cref="P:DotNetToGitHubWiki.Class.DummyOption"/> <code>
            yep
            </code>
            </summary>
            <typeparam name="T">The <see langword="object"/> type.</typeparam>
            <remarks>pouet</remarks>
            <example>var dn = new DummyNested&lt;object&gt;();</example>
        </member>
        <member name="E:DotNetToGitHubWiki.Class.DummyNested`1.Action">
            <summary>dummy</summary>
        </member>
    </members>
</doc>
